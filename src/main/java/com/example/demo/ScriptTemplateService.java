package com.example.demo;

import com.github.mustachejava.Mustache;
import com.github.mustachejava.MustacheFactory;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.StringWriter;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class ScriptTemplateService {
    private final MustacheFactory mf;

    /**
     * Ec2DeployRequestDto를 바탕으로 Mustache 템플릿을 렌더링하여 쉘 스크립트를 생성.
     */
    public String generateEc2DeployScript(Ec2DeployRequestDto dto) {
        // 1) 템플릿 로드
        Mustache mustache = null;
        try {
            // 클래스패스 내 경로: templates/script/ec2Deploy.sh.mustache
            mustache = mf.compile("templates/script/ec2Deploy.sh.mustache");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        // 2) 컨텍스트 맵 구성
        Map<String, Object> context = buildContextFromDto(dto);

        // 3) 렌더링
        StringWriter writer = new StringWriter();
        try {
            mustache.execute(writer, context).flush();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        return writer.toString();
    }

    private Map<String, Object> buildContextFromDto(Ec2DeployRequestDto dto) {
        Map<String, Object> ctx = new HashMap<>();
        ctx.put("repoUrl", dto.getRepoUrl());
        ctx.put("branch", dto.getBranch()); // null이면 템플릿에서 default 처리
        ctx.put("buildCommands", dto.getBuildCommands());
        ctx.put("artifactPath", dto.getArtifactPath());

        Map<String, Object> ec2 = new HashMap<>();
        ec2.put("host", dto.getEc2().getHost());
        ec2.put("user", dto.getEc2().getUser());
        // sshKeySecretName은 스크립트 내에 직접 삽입하지 않으나, 주석 또는 검증용으로 사용 가능
        ec2.put("sshKeySecretName", dto.getEc2().getSshKeySecretName());
        ec2.put("targetDir", dto.getEc2().getTargetDir());
        // preDeployCommands, postDeployCommands: null일 수 있으므로 빈 리스트로 대체
        ec2.put("preDeployCommands",
                dto.getEc2().getPreDeployCommands() != null ? dto.getEc2().getPreDeployCommands() : Collections.emptyList());
        ec2.put("postDeployCommands",
                dto.getEc2().getPostDeployCommands() != null ? dto.getEc2().getPostDeployCommands() : Collections.emptyList());

        ctx.put("ec2", ec2);
        return ctx;
    }
    public String generateJenkinsJobConfig(String jobName, String pipelineScript) {
        Mustache mustache = null;
        try {
            mustache = mf.compile("templates/script/jenkinsJobConfig.mustache");
        } catch (Exception e) {
        }
        System.out.println(pipelineScript);
        Map<String, Object> context = Map.of(
                "description", "Generated by Spring for job " + jobName,
                "script", pipelineScript
        );
        StringWriter writer = new StringWriter();
        try {
            mustache.execute(writer, context).flush();
        } catch (Exception e) {
        }
        String configXml = writer.toString();

        return configXml;
    }

    public String generateConfig(JobCreateDto dto, String pipelineScript) {
        Mustache mustache = null;
        try {
            mustache = mf.compile("templates/script/jenkinsJobConfig.mustache");
        } catch (Exception e) {
        }
        System.out.println(pipelineScript);
        Map<String, Object> context = new HashMap<>();
        context.put("url", dto.getUrl());
        context.put("description", dto.getDescription());
        context.put("script", pipelineScript);
        context.put("githubtrigger",dto.getGithubtrigger());
        StringWriter writer = new StringWriter();
        try {
            mustache.execute(writer, context).flush();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        String configXml = writer.toString();
        System.out.println(configXml);
        return configXml;
    }
}

